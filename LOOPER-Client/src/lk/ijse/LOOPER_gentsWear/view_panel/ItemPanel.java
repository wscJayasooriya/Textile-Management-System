/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.ijse.LOOPER_gentsWear.view_panel;

import java.awt.Color;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import lk.ijse.LOOPER_gentsWear.common.Validation;
import lk.ijse.LOOPER_gentsWear.controller.ManageItemController;
import lk.ijse.LOOPER_gentsWear.dto.ItemDTO;
import lk.ijse.LOOPER_gentsWear.observer.Observer;

/**
 *
 * @author Sandun_CJ
 */
public class ItemPanel extends javax.swing.JPanel implements Observer {

    private boolean update = false;
    private String reservedItemCode = "";

    /**
     * Creates new form NewJPanel
     */
    public ItemPanel() {
        initComponents();

        loadAllItems();
        scrTbl.getViewport().setBackground(Color.WHITE);
        cmbItemCategory.setBackground(Color.WHITE);

        try {
            UnicastRemoteObject.exportObject(this, 0);
            ManageItemController.getSubject().registerObserver(this);
        } catch (RemoteException ex) {
            Logger.getLogger(ItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        tblItem.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                if (tblItem.getSelectedRow() == -1) {
                    btnDeleteItem.setEnabled(true);
                    btnUpdate.setEnabled(true);
                    update = false;
                    return;
                }

                try {
                    if (reservedItemCode == "") {
                        ManageItemController.releaseItem(reservedItemCode);
                    }

                    reservedItemCode = tblItem.getValueAt(tblItem.getSelectedRow(), 0).toString();
                    boolean reservItem = ManageItemController.reservItem(reservedItemCode);

                    if (reservItem) {
                        update = true;
                        int row = tblItem.getSelectedRow();

                        txtItemCode.setText(tblItem.getValueAt(row, 0).toString());
                        cmbItemCategory.setSelectedItem(tblItem.getValueAt(row, 1));
                        txtDescription.setText(tblItem.getValueAt(row, 2).toString());
                        txtQty.setText(tblItem.getValueAt(row, 3).toString());
                        txtBrand.setText(tblItem.getValueAt(row, 4).toString());
                        txtSellingPrice.setText(tblItem.getValueAt(row, 5).toString());

                    } else {
                        update = false;
                        JOptionPane.showMessageDialog(ItemPanel.this, "Item has been already reserved");
                        tblItem.clearSelection();
                    }
                } catch (Exception ex) {
                    Logger.getLogger(ItemPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        btnNewItem = new javax.swing.JButton();
        btnDeleteItem = new javax.swing.JButton();
        btnSaveItem = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtItemCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JLabel();
        txtBrand = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cmbItemCategory = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        txtSellingPrice = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        scrTbl = new javax.swing.JScrollPane();
        tblItem = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1070, 570));
        setLayout(null);

        jLabel2.setFont(new java.awt.Font("Stencil Std", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/LOOPER_gentsWear/images/item.png"))); // NOI18N
        jLabel2.setText("ITEM..");
        add(jLabel2);
        jLabel2.setBounds(0, 10, 160, 50);

        btnNewItem.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnNewItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/LOOPER_gentsWear/images/add.png"))); // NOI18N
        btnNewItem.setMnemonic('N');
        btnNewItem.setText("New Item");
        btnNewItem.setToolTipText("Click to add new subject");
        btnNewItem.setFocusPainted(false);
        btnNewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewItemActionPerformed(evt);
            }
        });
        add(btnNewItem);
        btnNewItem.setBounds(40, 100, 140, 30);

        btnDeleteItem.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnDeleteItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/LOOPER_gentsWear/images/delete.png"))); // NOI18N
        btnDeleteItem.setText("Delete");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });
        add(btnDeleteItem);
        btnDeleteItem.setBounds(40, 450, 110, 30);

        btnSaveItem.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSaveItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/LOOPER_gentsWear/images/save.png"))); // NOI18N
        btnSaveItem.setText("Save");
        btnSaveItem.setToolTipText("Clikc to save changes");
        btnSaveItem.setFocusPainted(false);
        btnSaveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveItemActionPerformed(evt);
            }
        });
        add(btnSaveItem);
        btnSaveItem.setBounds(280, 450, 90, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("Item Category ");
        add(jLabel7);
        jLabel7.setBounds(50, 190, 90, 30);

        txtItemCode.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtItemCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtItemCode.setDragEnabled(true);
        txtItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemCodeActionPerformed(evt);
            }
        });
        txtItemCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemCodeKeyPressed(evt);
            }
        });
        add(txtItemCode);
        txtItemCode.setBounds(120, 150, 100, 30);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("Description");
        add(jLabel8);
        jLabel8.setBounds(50, 230, 70, 30);

        txtDescription.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtDescription.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtDescription.setDragEnabled(true);
        txtDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescriptionActionPerformed(evt);
            }
        });
        add(txtDescription);
        txtDescription.setBounds(130, 230, 190, 30);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setText("Quantity");
        add(jLabel9);
        jLabel9.setBounds(50, 310, 60, 30);

        txtQty.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtQty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtQty.setDragEnabled(true);
        txtQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyActionPerformed(evt);
            }
        });
        add(txtQty);
        txtQty.setBounds(120, 310, 70, 30);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel10.setText("Brand");
        add(jLabel10);
        jLabel10.setBounds(50, 270, 40, 30);

        btnSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/LOOPER_gentsWear/images/search.png"))); // NOI18N
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSearchMouseExited(evt);
            }
        });
        add(btnSearch);
        btnSearch.setBounds(244, 150, 40, 30);

        txtBrand.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtBrand.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtBrand.setDragEnabled(true);
        txtBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrandActionPerformed(evt);
            }
        });
        add(txtBrand);
        txtBrand.setBounds(100, 270, 100, 30);

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel11.setText("Item Code ");
        add(jLabel11);
        jLabel11.setBounds(50, 150, 70, 30);

        cmbItemCategory.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbItemCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "T-Shirt", "Shirt", "Trouser", "Shorts", "Shoes", "Sunglasses" }));
        cmbItemCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemCategoryActionPerformed(evt);
            }
        });
        add(cmbItemCategory);
        cmbItemCategory.setBounds(140, 190, 100, 30);

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel13.setText("Selling Price");
        add(jLabel13);
        jLabel13.setBounds(50, 360, 80, 30);

        txtSellingPrice.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtSellingPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtSellingPrice.setDragEnabled(true);
        txtSellingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSellingPriceActionPerformed(evt);
            }
        });
        add(txtSellingPrice);
        txtSellingPrice.setBounds(140, 360, 100, 30);

        btnUpdate.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/LOOPER_gentsWear/images/update.png"))); // NOI18N
        btnUpdate.setText("Modify");
        btnUpdate.setToolTipText("Clikc to save changes");
        btnUpdate.setFocusPainted(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate);
        btnUpdate.setBounds(160, 450, 110, 30);

        jLabel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Item ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        add(jLabel6);
        jLabel6.setBounds(30, 70, 360, 430);

        scrTbl.setBackground(new java.awt.Color(255, 255, 255));

        tblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Category", "Description", "Qty", "Brand", "Selling Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrTbl.setViewportView(tblItem);
        if (tblItem.getColumnModel().getColumnCount() > 0) {
            tblItem.getColumnModel().getColumn(0).setResizable(false);
            tblItem.getColumnModel().getColumn(1).setResizable(false);
            tblItem.getColumnModel().getColumn(2).setResizable(false);
            tblItem.getColumnModel().getColumn(3).setResizable(false);
            tblItem.getColumnModel().getColumn(4).setResizable(false);
            tblItem.getColumnModel().getColumn(5).setResizable(false);
        }

        add(scrTbl);
        scrTbl.setBounds(410, 80, 630, 330);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 255), 3));
        jLabel1.setOpaque(true);
        add(jLabel1);
        jLabel1.setBounds(0, 0, 1070, 570);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewItemActionPerformed
        clearAllTextFields();
        txtItemCode.requestFocusInWindow();
        tblItem.clearSelection();
    }//GEN-LAST:event_btnNewItemActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        try {
            boolean result = ManageItemController.deleteItem(txtItemCode.getText());

            if (result) {
                JOptionPane.showMessageDialog(this, "Item has been Deleted Successfull..");
            } else {
                JOptionPane.showConfirmDialog(this, "Item Deleted Fail..");
            }

            ManageItemController.releaseItem(reservedItemCode);
            reservedItemCode = "";
            clearAllTextFields();
            tblItem.clearSelection();
            txtItemCode.requestFocusInWindow();
            update = false;

        } catch (Exception ex) {
            Logger.getLogger(ItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadAllItems();
        clearAllTextFields();
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void btnSaveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveItemActionPerformed

        ItemDTO item = new ItemDTO(
                txtItemCode.getText(),
                cmbItemCategory.getSelectedItem().toString(),
                txtDescription.getText(),
                txtBrand.getText(),
                Double.parseDouble(txtSellingPrice.getText()),
                Integer.parseInt(txtQty.getText())
        );
        try {
            boolean result = false;
            if (!update) {
                result = ManageItemController.addItem(item);
            }
            if (result) {
                JOptionPane.showMessageDialog(this, "Item has been Saved Successfull..");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to Save the Item..");
            }

            ManageItemController.releaseItem(reservedItemCode);
            reservedItemCode = "";
            clearAllTextFields();
            tblItem.clearSelection();
            txtItemCode.requestFocusInWindow();
            update = false;
        } catch (Exception ex) {
            Logger.getLogger(ItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadAllItems();
        clearAllTextFields();

    }//GEN-LAST:event_btnSaveItemActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        ItemDTO item = new ItemDTO(
                txtItemCode.getText(),
                cmbItemCategory.getSelectedItem().toString(),
                txtDescription.getText(),
                txtBrand.getText(),
                Double.parseDouble(txtSellingPrice.getText()),
                Integer.parseInt(txtQty.getText())
        );
        try {
            boolean result = true;
            if (update) {
                result = ManageItemController.updateItem(item);
            }
            if (!result) {
                JOptionPane.showMessageDialog(this, "Item has been Update Successfull..");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to Update the Item..");
            }

            ManageItemController.releaseItem(reservedItemCode);
            reservedItemCode = "";
            clearAllTextFields();
            tblItem.clearSelection();
            txtItemCode.requestFocusInWindow();
            update = false;
        } catch (Exception ex) {
            Logger.getLogger(ItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadAllItems();
        clearAllTextFields();


    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemCodeActionPerformed
        cmbItemCategory.requestFocusInWindow();
    }//GEN-LAST:event_txtItemCodeActionPerformed

    private void txtItemCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemCodeKeyPressed

    }//GEN-LAST:event_txtItemCodeKeyPressed

    private void btnSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseEntered
        btnSearch.setSize(45, 35);
    }//GEN-LAST:event_btnSearchMouseEntered

    private void btnSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseExited
        btnSearch.setSize(40, 30);
    }//GEN-LAST:event_btnSearchMouseExited

    private void btnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseClicked

        try {
            ItemDTO searchItem = ManageItemController.searchItem(txtItemCode.getText());
            txtBrand.setText(searchItem.getBrand());
            txtDescription.setText(searchItem.getDescription());
            cmbItemCategory.setSelectedItem(searchItem.getCategoryName().toString());
            txtQty.setText(Integer.toString(searchItem.getQty()));
            txtSellingPrice.setText(Double.toString(searchItem.getSellingPrice()));

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "No Such as Dress This Code..");
            clearAllTextFields();
            txtItemCode.requestFocusInWindow();
        }


    }//GEN-LAST:event_btnSearchMouseClicked

    private void cmbItemCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemCategoryActionPerformed
        txtDescription.requestFocusInWindow();
    }//GEN-LAST:event_cmbItemCategoryActionPerformed

    private void txtDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescriptionActionPerformed
        txtBrand.requestFocusInWindow();
    }//GEN-LAST:event_txtDescriptionActionPerformed

    private void txtBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrandActionPerformed
        if(Validation.name(txtBrand)){
            txtQty.requestFocus();
            txtBrand.setBorder(new LineBorder(new Color(204,204,204)));
        }else{
            JOptionPane.showMessageDialog(this,"Invalid Input");   
            txtBrand.setBorder(new LineBorder(Color.RED));
        }
    }//GEN-LAST:event_txtBrandActionPerformed

    private void txtQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyActionPerformed
        if(Validation.numberOnly(txtQty)){
            txtSellingPrice.requestFocus();
            txtQty.setBorder(new LineBorder(new Color(204,204,204)));
        }else{
            JOptionPane.showMessageDialog(this,"Invalid Input");  
            txtQty.setBorder(new LineBorder(Color.RED));
        }
    }//GEN-LAST:event_txtQtyActionPerformed

    private void txtSellingPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSellingPriceActionPerformed
        if(Validation.priceText(txtSellingPrice)){
            txtSellingPrice.setBorder(new LineBorder(new Color(204,204,204)));
            btnSaveItem.requestFocus();
        }else{
            JOptionPane.showMessageDialog(this,"Invalid Input");   
            txtSellingPrice.setBorder(new LineBorder(Color.RED));
        }
    }//GEN-LAST:event_txtSellingPriceActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnNewItem;
    private javax.swing.JButton btnSaveItem;
    private javax.swing.JLabel btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbItemCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane scrTbl;
    private javax.swing.JTable tblItem;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtItemCode;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtSellingPrice;
    // End of variables declaration//GEN-END:variables

    private void clearAllTextFields() {
        txtItemCode.setText("");
        txtDescription.setText("");
        txtBrand.setText("");
        txtQty.setText("");
        txtSellingPrice.setText("");
    }

    @Override
    public void updateObservers() throws Exception {
        loadAllItems();
    }

    private void loadAllItems() {

        DefaultTableModel dtm = (DefaultTableModel) tblItem.getModel();
        dtm.setRowCount(0);

        try {
            List<ItemDTO> items = ManageItemController.getAllItems();

            if (items != null) {
                for (ItemDTO item : items) {
                    Object[] rowData = {
                        item.getiCode(),
                        item.getCategoryName(),
                        item.getDescription(),
                        item.getQty(),
                        item.getBrand(),
                        item.getSellingPrice()
                    };
                    dtm.addRow(rowData);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(ItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
